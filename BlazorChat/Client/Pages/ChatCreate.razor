@page "/chats/create"

@using BlazorChat.Client.Models.Authentication
@using BlazorChat.Client.Services;
@using BlazorChat.Client.Models.Chat;
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@inject HttpClient Http
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthState

<PageTitle>Create Chat</PageTitle>

<EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <ValidationMessage For=@(() => ErrorMessage) />
    <br />
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText DisplayName="Name" id="name" @bind-Value="createInput.Name" class="form-control" />
    </div>

    <label class="form-label" for="users">Users:</label>
    <br />
    <div id="users" class="form-group">
            @foreach (ChatCreateInput.UserCheckbox user in createInput.UserCheckboxes)
            {
                <div class="form-check">
                    <label class="form-check-label" for="@user.Id">@user.Name</label>
                    <InputCheckbox id="@user.Id" @bind-Value="@user.IsChecked" class="form-check-input" />
                </div>
                
            }
    </div>
    <br />
    <input type="submit" class="btn btn-primary" value="Create" />
</EditForm>
@string.Join(", ", SelectedIds)

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthTask { get; set; }
    private SignInRequest Request = new();
    private EditContext? EditContext;
    private ValidationMessageStore? MessageStore;
    private FieldIdentifier ErrorMessage;
    private ClaimsPrincipal? User;
    private List<string> users = new List<string>() { "Alex", "Viorel", "Viorica", "Marcel", "Marcica" };
    private List<string> SelectedIds { get; } = new List<string>();

    private ChatCreateInput createInput = new();

    private void AddUsersToInput()
    {
        createInput.UserCheckboxes = users.Select(x => new ChatCreateInput.UserCheckbox()
        {
            Id = Guid.NewGuid().ToString(),
            Name = x,
            IsChecked = false
        }).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        AddUsersToInput();

        var authState = await AuthTask;
        User = authState.User;
        EditContext = new(Request);
        EditContext.OnValidationRequested += HandleValidationRequested;
        EditContext.OnFieldChanged += HandleFieldChanged;
        MessageStore = new(EditContext);
    }

    private void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args)
    {
        MessageStore?.Clear();
    }

    private async Task HandleValidSubmit()
    {
        MessageStore?.Clear();
        var response = await Http.PostAsJsonAsync("/sign-in", Request);

        if (!response.IsSuccessStatusCode)
        {
            MessageStore?.Add(() => ErrorMessage, "Username or Password doesn't match!");
        }
        else
        {
            var authState = await ((CustomAuthenticationStateProvider)AuthState).ChangeUser(Request.Username);
            User = authState.User;
            NavManager.NavigateTo("/");
        }
    }

    private void HandleFieldChanged(object? sender,
        FieldChangedEventArgs args)
    {
        MessageStore?.Clear();
    }

    public void Dispose()
    {
        if (EditContext is not null)
        {
            EditContext.OnValidationRequested -= HandleValidationRequested;
            EditContext.OnFieldChanged -= HandleFieldChanged;
        }
    }
}
