@page "/chats/create"

@using BlazorChat.Client.Services
@using BlazorChat.Client.Models.Feeds.Chat
@using System.Security.Claims
@using BlazorChat.Client.Requests.Users
@using BlazorChat.Client.Extensions
@using BlazorChat.Client.Requests.Chats
@using BlazorChat.Client.Models.Responses.ChatRooms

@inject NavigationManager NavManager
@inject UserRequests UserRequests
@inject ChatRequests ChatRequests

<PageTitle>Create Chat</PageTitle>

<EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <ValidationMessage For=@(() => ErrorMessage) />
    <br />
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText DisplayName="Name" id="name" @bind-Value="createInput.Name" class="form-control" />
    </div>
    <br />

    <label class="form-label" for="users">Users:</label>
    <div id="users" class="form-group">
        <CascadingValue Value="@createInput.UserCheckboxes" Name="UserCheckboxes">
            <UsersList />
        </CascadingValue>
    </div>
    <br />
    <input type="submit" class="btn btn-primary" value="Create" />
</EditForm>

@code {
    private EditContext? EditContext;
    private ValidationMessageStore? MessageStore;
    private FieldIdentifier ErrorMessage;
    private ChatCreateInput createInput = new();

    protected override async Task OnInitializedAsync()
    {
        EditContext = new(createInput);
        EditContext.OnValidationRequested += HandleValidationRequested;
        EditContext.OnFieldChanged += HandleFieldChanged;
        MessageStore = new(EditContext);

        await SetUserCheckboxes();
        await base.OnInitializedAsync();
    }

    private async Task SetUserCheckboxes()
    {
        var response = await UserRequests.GetAsync();

        createInput.UserCheckboxes = response.Users.ToFeed();
    }

    private void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args)
    {
        MessageStore?.Clear();
    }

    private async Task HandleValidSubmit()
    {
        MessageStore?.Clear();
        var response = await ChatRequests.CreateAsync(createInput.ToRequest());
        await ChatHub.RequestChatListAsync();

        NavManager.NavigateTo($"/chats/{response.Id}");
    }

    private void HandleFieldChanged(object? sender,
        FieldChangedEventArgs args)
    {
        MessageStore?.Clear();
    }

    public void Dispose()
    {
        if (EditContext is not null)
        {
            EditContext.OnValidationRequested -= HandleValidationRequested;
            EditContext.OnFieldChanged -= HandleFieldChanged;
        }
    }
}
