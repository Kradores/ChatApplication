@page "/authentication/sign-in"

@using BlazorChat.Client.Models.Requests.Authentication
@using BlazorChat.Client.Services
@using BlazorChat.Client.HttpApi.Authentication

@inject AuthenticationApi AuthApi
@inject NavigationManager NavManager

<PageTitle>SignIn</PageTitle>

<EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <ValidationMessage For=@(() => ErrorMessage) />
    <br />
    <div class="form-group">
        <label for="username">Username:</label>
        <InputText DisplayName="Username" id="username" @bind-Value="Request.Username" class="form-control" size="50" />
    </div>
    <br />
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText DisplayName="Password" id="password" type="password" @bind-Value="Request.Password" class="form-control" size="50" />
    </div>
    <br />
    <input type="submit" class="btn btn-primary" value="Sign-In" />
</EditForm>

@code {
    private SignInRequest Request = new();
    private EditContext? EditContext;
    private ValidationMessageStore? MessageStore;
    private FieldIdentifier ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        EditContext = new(Request);
        EditContext.OnValidationRequested += HandleValidationRequested;
        EditContext.OnFieldChanged += HandleFieldChanged;
        MessageStore = new(EditContext);
    }

    private void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args)
    {
        MessageStore?.Clear();
    }

    private async Task HandleValidSubmit()
    {
        MessageStore?.Clear();
        var response = await AuthApi.LoginAsync(Request);

        if (!response)
        {
            MessageStore?.Add(() => ErrorMessage, "Username or Password doesn't match!");
        }
        else
        {
            NavManager.NavigateTo("/");
        }
    }

    private void HandleFieldChanged(object? sender,
        FieldChangedEventArgs args)
    {
        MessageStore?.Clear();
    }

    public void Dispose()
    {
        if (EditContext is not null)
        {
            EditContext.OnValidationRequested -= HandleValidationRequested;
            EditContext.OnFieldChanged -= HandleFieldChanged;
        }
    }
}
