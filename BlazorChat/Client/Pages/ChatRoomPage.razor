@page "/chats/{id}"

@using BlazorChat.Client.Requests.Messages
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChat.Client.StateContainers
@using BlazorChat.Client.Extensions
@using BlazorChat.Client.Models.Feeds.Messages
@using BlazorChat.Client.Models.Feeds.Chat

@inject MessagesApi api
@inject NavigationManager Navigation
@implements IAsyncDisposable

<AuthorizeView>
    <Authorized>
        <h3>ChatRoom @ChatRoom?.Name</h3>

        <div class="message-list-container">
            @foreach (var message in ChatHub.Messages)
            {
                <div class="message-container">
                    <span style="width:100%;font-weight: bold;">@message.SenderName</span>
                    <p>@message.Text</p>
                    <span class="time-right">@message.CreatedAt</span>
                </div>
            }
        <div></div>
        </div>

        <EditForm Model="@Message" OnValidSubmit="@Send" class="message-input-form">
            <ChildContent Context="EditContext">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="form-group col">
                        <InputText DisplayName="Text" id="text" @bind-Value="Message.Text" class="form-control" />
                    </div>
                    <div class="col-1">
                        <input type="submit" class="btn btn-primary" style="float:right" value="Send" />
                    </div>
                </div>
            </ChildContent>
        </EditForm>
    </Authorized>
</AuthorizeView>


@code {
    [Parameter]
    public string? Id { get; set; } = null;

    private ChatRoom ChatRoom { get; set; } = new();
    private MessageInput Message { get; set; } = new();

    protected override void OnInitialized()
    {
        ChatHub.OnStateChange += StateHasChanged;
        ChatHub.OnMessageListStateChange += StateHasChanged;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (!string.IsNullOrEmpty(Id))
        {
            ChatHub.ClearMessages();
            await ChatHub.RemoveFromGroupAsync(Id);
        }
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            await ChatHub.AddToGroupAsync(Id);
            ChatRoom = ChatHub.ChatRooms.First(x => x.Id == int.Parse(Id));

            var response = await api.GetAsync(new()
                {
                    ChatId = int.Parse(Id),
                    PageNumber = 1,
                    PageSize = 50
                });

            ChatHub.InitMessages(response.ToFeed());
        }
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            await ChatHub.SendGroupMessageAsync(Id, Message.Text);
            Message.Text = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (!string.IsNullOrEmpty(Id)) await ChatHub.RemoveFromGroupAsync(Id);
        ChatHub.OnStateChange -= StateHasChanged;
        ChatHub.OnMessageListStateChange -= StateHasChanged;
    }
}
