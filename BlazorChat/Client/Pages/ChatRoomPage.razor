@page "/chats/{id}"

@using BlazorChat.Client.Requests.Messages
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChat.Client.StateContainers
@using BlazorChat.Client.Extensions
@using BlazorChat.Client.Models.Feeds.Messages

@inject MessagesApi api
@inject NavigationManager Navigation
@implements IAsyncDisposable

<h3>ChatRoom @Id</h3>

<EditForm Model="@Message" OnValidSubmit="@Send">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="form-group col">
            <InputText DisplayName="Text" id="text" @bind-Value="Message.Text" class="form-control" />
        </div>
        <div class="col-1">
            <input type="submit" class="btn btn-primary" style="float:right" value="Send" />
        </div>
    </div>
</EditForm>

<ul id="messagesList">
    @foreach (var message in ChatHub.Messages)
    {
        <li>@($"{message.CreatedAt} {message.SenderName}: {message.Text}")</li>
    }
</ul>

@code {
    [Parameter]
    public string? Id { get; set; } = null;

    private MessageInput Message { get; set; } = new();

    protected override void OnInitialized()
    {
        ChatHub.OnStateChange += StateHasChanged;
        ChatHub.OnMessageListStateChange += StateHasChanged;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (!string.IsNullOrEmpty(Id))
        {
            ChatHub.ClearMessages();
            await ChatHub.RemoveFromGroupAsync(Id);
        }
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            await ChatHub.AddToGroupAsync(Id);

            var response = await api.GetAsync(new()
                {
                    ChatId = int.Parse(Id),
                    PageNumber = 1,
                    PageSize = 50
                });

            ChatHub.InitMessages(response.ToFeed());
        }
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            await ChatHub.SendGroupMessageAsync(Id, Message.Text);
            Message.Text = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (!string.IsNullOrEmpty(Id)) await ChatHub.RemoveFromGroupAsync(Id);
        ChatHub.OnStateChange -= StateHasChanged;
        ChatHub.OnMessageListStateChange -= StateHasChanged;
    }
}
