@using BlazorChat.Client.Models.Responses.ChatRooms
@using BlazorChat.Client.Extensions
@using BlazorChat.Client.Models.Feeds.Chat
@using BlazorChat.Client.StateContainers;

@implements IDisposable

@inject HttpClient Http
@inject AuthenticationStateProvider AuthState
@inject ChatRoomsStateContainer ChatRooms


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorChat</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<AuthorizeView>
    <Authorized>
        <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="chats/create">
                        <span class="oi oi-plus" aria-hidden="true"></span> Create New Chat
                    </NavLink>
                </div>
                <div hidden="@isHidden" class="nav-item px-3">
                    <NavLink class="nav-link" href="#" onclick="@(async () => GetChatListAsync)">
                        <span class="oi oi-action-redo" aria-hidden="true"></span> Refresh
                    </NavLink>
                </div>
                @foreach (ChatRoom chat in ChatRooms.Value)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="@("chats/" + chat.Id)">
                            <span class="oi oi-chat" aria-hidden="true"></span> @chat.Name
                        </NavLink>
                    </div>
                }
            </nav>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    //private List<ChatRoom> ChatRooms { get; set; } = new();
    private bool isHidden = true;

    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var identity = authState.User.Identity;

        AuthState.AuthenticationStateChanged += AuthenticationStateChangedHandler;
        ChatRooms.OnStateChange += StateHasChanged;

        if (identity?.IsAuthenticated != null && identity?.IsAuthenticated == true)
        {
            await GetChatListAsync();
        }
    }

    private async Task GetChatListAsync()
    {
        isHidden = true;
        var response = await Http.GetFromJsonAsync<ChatListResponse>("/chat");

        if (response != null)
        {
            ChatRooms.Init(response.Rooms.ToFeed());
            isHidden = true;
        }
        else
        {
            isHidden = false;
        }
    }

    private void AuthenticationStateChangedHandler(Task<AuthenticationState> task)
    {
        if (task is not null)
        {
            var authState = task.Result;
            var identity = authState.User.Identity;

            if (identity?.IsAuthenticated != null && identity?.IsAuthenticated == true)
            {
                GetChatListAsync().ConfigureAwait(true);
            }
        }
    }

    public void Dispose()
    {
        AuthState.AuthenticationStateChanged -= AuthenticationStateChangedHandler;
        ChatRooms.OnStateChange -= StateHasChanged;
    }
}
